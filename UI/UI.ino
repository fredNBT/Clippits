#include <lvgl.h>
#include <TFT_eSPI.h> // Assuming you're using the TFT_eSPI library
#include "ui.h"       // Include the SquareLine Studio generated UI files

// Initialize the display
TFT_eSPI tft = TFT_eSPI();

// Define screen dimensions (adjust these as per your screen)
#define SCREEN_WIDTH  320
#define SCREEN_HEIGHT 480

static lv_disp_draw_buf_t draw_buf;
static lv_color_t buf[SCREEN_WIDTH * 10];

// Function to initialize LVGL
void lvgl_setup() {
    lv_init();

    // Initialize TFT_eSPI display
    tft.begin();
    tft.setRotation(0);  // Adjust rotation as needed

    // Initialize LVGL draw buffer
    lv_disp_draw_buf_init(&draw_buf, buf, NULL, SCREEN_WIDTH * 10);

    // Setup the display driver
    static lv_disp_drv_t disp_drv;
    lv_disp_drv_init(&disp_drv);
    disp_drv.hor_res = SCREEN_WIDTH;
    disp_drv.ver_res = SCREEN_HEIGHT;
    disp_drv.flush_cb = my_disp_flush;
    disp_drv.draw_buf = &draw_buf;
    lv_disp_drv_register(&disp_drv);

    // Initialize the UI generated by SquareLine Studio
    ui_init();
}

// Flush function for the display driver
void my_disp_flush(lv_disp_drv_t * disp, const lv_area_t * area, lv_color_t * color_p) {
    uint32_t w = (area->x2 - area->x1 + 1);
    uint32_t h = (area->y2 - area->y1 + 1);

    tft.startWrite();
    tft.setAddrWindow(area->x1, area->y1, w, h);
    tft.pushColors((uint16_t *)&color_p->full, w * h, true);
    tft.endWrite();

    lv_disp_flush_ready(disp);
}

void setup() {
   Serial.begin(115200);
   Serial.println("start");
  delay(500);
  pinMode(2, OUTPUT);
digitalWrite(2, LOW);
delay(100);
digitalWrite(2, HIGH);
delay(1000);  // Give the display time to initialize
 
    lvgl_setup();

   delay(1000);

}

void loop() {
  Serial.println("loop");
    lv_timer_handler(); // Let LVGL handle the GUI tasks
    delay(5);
}